const { Pool } = require('pg');
require('dotenv').config();

console.log('üîß Configura√ß√£o do banco - dotenv carregado');
console.log('üìç DB_HOST:', process.env.DB_HOST);
console.log('üîå DB_PORT:', process.env.DB_PORT);
console.log('üóÑÔ∏è DB_NAME:', process.env.DB_NAME);
console.log('üë§ DB_USER:', process.env.DB_USER);
console.log('üîë DB_PASSWORD:', process.env.DB_PASSWORD ? '***' : 'undefined');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'beastfood',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
  // Configura√ß√µes para PostGIS
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  // Configura√ß√£o de timezone para UTC-3 (Bras√≠lia)
  options: '-c timezone=America/Sao_Paulo',
  // Otimiza√ß√µes de performance
  statement_timeout: 10000, // 10 segundos
  query_timeout: 10000, // 10 segundos
  // Configura√ß√µes de pool otimizadas
  min: 2, // M√≠nimo de conex√µes
  acquireTimeoutMillis: 10000, // Timeout para adquirir conex√£o
  createTimeoutMillis: 10000, // Timeout para criar conex√£o
  destroyTimeoutMillis: 5000, // Timeout para destruir conex√£o
  reapIntervalMillis: 1000, // Intervalo para limpeza de conex√µes
  createRetryIntervalMillis: 200 // Intervalo para retry de cria√ß√£o
});

console.log('‚úÖ Pool do banco criado com configura√ß√£o:', {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'beastfood',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD ? '***' : 'undefined',
  timezone: 'America/Sao_Paulo'
});

console.log('üîç Pool criado:', pool);
console.log('üîç Tipo do pool:', typeof pool);
console.log('üîç Pool tem m√©todo query?', typeof pool.query);

// Teste de conex√£o
pool.on('connect', () => {
  console.log('‚úÖ Conectado ao banco PostgreSQL');
});

pool.on('error', (err) => {
  console.error('‚ùå Erro na conex√£o com o banco:', err);
});

// Teste de conex√£o inicial
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('‚ùå Erro ao testar conex√£o com o banco:', err);
  } else {
    console.log('‚úÖ Teste de conex√£o com o banco bem-sucedido:', res.rows[0]);
  }
});

// Fun√ß√£o para verificar se PostGIS est√° dispon√≠vel
const checkPostGIS = async () => {
  try {
    const result = await pool.query('SELECT PostGIS_Version()');
    console.log('‚úÖ PostGIS dispon√≠vel:', result.rows[0].postgis_version);
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è PostGIS n√£o dispon√≠vel. Funcionalidades de geolocaliza√ß√£o ser√£o limitadas.');
    return false;
  }
};

// Verificar PostGIS na inicializa√ß√£o
checkPostGIS();

module.exports = pool;
